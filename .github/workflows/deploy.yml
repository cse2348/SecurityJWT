name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      IMAGE_URI: 228041307119.dkr.ecr.ap-northeast-2.amazonaws.com/springjwt-repo:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Docker image to ECR
        run: |
          docker build -t ${{ env.IMAGE_URI }} .
          docker push ${{ env.IMAGE_URI }}

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            cat << EOF > ~/app/.env
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            EOF

            # Docker 로그인 (ECR에 접근하기 위해 필요)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            # 기존 컨테이너 중지 및 삭제
            docker stop app || true
            docker rm app || true
            
            # 최신 이미지 pull
            docker pull ${{ env.IMAGE_URI }}
            
            # 새 컨테이너 실행
            docker run -d \
              --name app \
              --env-file ~/app/.env \
              -p 8080:8080 \
              ${{ env.IMAGE_URI }}